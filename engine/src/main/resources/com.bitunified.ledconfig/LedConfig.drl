/*
 * Copyright 2016 BitUnified B.V. and/or its affiliates.
 *
 */

package com.bitunified.ledconfig;
 
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;

import com.bitunified.ledconfig.domain.Dimension;
import com.bitunified.ledconfig.composedproduct.ComposedProduct;
import com.bitunified.ledconfig.domain.message.Message
import com.bitunified.ledconfig.domain.product.cover.types.ResinClear;
import com.bitunified.ledconfig.domain.product.cover.types.Resin;
import com.bitunified.ledconfig.domain.product.PCB.types.RGBLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.DecoLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;
import com.bitunified.ledconfig.domain.product.cable.Cable;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.CableEntry;
import com.bitunified.ledconfig.domain.product.mounting.Mounting;
import com.bitunified.ledconfig.domain.Property
import com.bitunified.ledconfig.domain.product.accessoires.Clip
import com.bitunified.ledconfig.domain.product.accessoires.CableChannel
import com.bitunified.ledconfig.parts.Part
import com.bitunified.ledconfig.domain.product.profile.Profile;
import com.bitunified.ledconfig.domain.message.MessageStatus;
import com.bitunified.ledconfig.domain.product.ModelResult;
import java.util.ArrayList
import java.util.List
import org.apache.commons.lang3.SerializationUtils;
global java.util.List<Message> messages
global java.util.Map<Part> parts
global java.util.Map<Integer,List<Message>> messageMap
//Rule with higher priority.
rule "Totale lengte berekening" salience 1
    when

       Mounting(mountingLeft:margins.left!=null, mountingRight:margins.right!=null)
       CableEntry(cableEntryLeft:margins.left!=null,cableEntryRight:margins.right!=null)
       LedStrip(ledstripLength:dimension.width!=null)
        cp:ComposedProduct(dimension.width==null)

    then
        int totalLength=(int)mountingLeft+(int)mountingRight+(int)ledstripLength+(int)cableEntryLeft+(int)cableEntryRight;
        cp.getDimension().width=totalLength;
        //List<Message> msgs=((List<Message>)messageMap.get(8));

        ((((List<Message>)(messageMap.get(8))))).add(new Message("Totale lengte automatisch berekend: "+totalLength+" mm."));
        System.out.println("Totale lengte automatisch berekend"+totalLength);
end

rule "Totale lengte minimaal"
    when
        LedStrip(afmetingen:dimension)
        LedStrip(dimension.width!=null)
        ComposedProduct(dimension.width!=null)
        ComposedProduct(dimension.width<(afmetingen.width+15))

    then
        messages.add(new Message("Totale lengte is groter dan ledstrip lengte inclusief marges.",8,MessageStatus.ERROR));

end

rule "Totale lengte is groter dan maximale ledstrip lengte"
    when
        ledstrip:LedStrip(maxDim:maxDimension,maxDimension.width!=null)
        ComposedProduct(dimension.width!=null,dimension.width<ledstrip.dimension.width)

    then
        messages.add(new Message("Totale lengte is groter dan maximale ledstrip lengte.",4,MessageStatus.ERROR));

end

rule "Kap en gieting"

    when
        Resin()
        DecoLedStrip(COLOR_PROP.value=="ROOD")
    then
        messages.add(new Message("Rood met giethars niet mogelijk"));

end

rule "Minimale lengte groter dan section lengte"
    when
        LedStrip(dimension.width<SECTION.value);
    then
        messages.add(new Message("Lengte ledstrip kan niet kleiner zijn dan sectie lengte."));
end

//rule "Kabeltype moet overeenkomen met PCB type"
//    when
//        exists(DecoLedStrip());
//        not(Cable(TYPE matches ".*2-aderig.*"));
//    then
//        messages.add(new Message("Let op: kabeltype past niet bij PCB."));
//    end

   rule "Kabeltype demo connector mag niet in combinatie met RGB Ledstrip"
       when
           exists(RGBLedStrip());
           Cable(CABLE_TYPE matches ".*DemoConnector.*");
       then
           messages.add(new Message("Kabel met demo connector kan niet in combinatie met RGB Ledstrip.",4,MessageStatus.ERROR));
       end



rule "Led strip section modulo"

    when

     ledstrip:LedStrip( sect:getProperty(LedStrip.SECTION_WIDTH),sect!=null,(sect.value % ledstrip.dimension.width)!=0)
    then

    messages.add(new Message("Ledstrip lengte moet een veelvoud zijn van sectielengte: "+ledstrip.getProperty(LedStrip.SECTION_WIDTH).getValue(),7,MessageStatus.ERROR));

end
rule "Aantal clips is evenredig aan lengte L20"
       no-loop false
           when

               exists(Profile(name matches ".*L20.*"));
               exists(Clip())
               composedproduct:ComposedProduct(dimension.width!=null);
               c:Long(longValue<((int)composedproduct.dimension.width/500),((int)composedproduct.dimension.width/500)>=(int)2) from accumulate( i : Part( product!=null,product.class==Clip.class ) from composedproduct.products, count(i) )

           then

            Part part=SerializationUtils.clone((Part)parts.get("10890"));
            insertLogical(part);
            modify(composedproduct){
                addProduct(part)
            }
            System.out.println("Clip toegevoegd voor L20");
           end

rule "Aantal clips minimaal 2 L20"
no-loop true
    when

        exists(Profile(name matches ".*L20.*"));
        exists(Clip())
        composedproduct:ComposedProduct(dimension.width!=null);
        eval((int)((composedproduct.getDimension().width)/(int)500)<(int)2);

    then

     Part part=SerializationUtils.clone((Part)parts.get("10890"));
            insertLogical(part);
            modify(composedproduct){
                addProduct(part)
            }
            part=SerializationUtils.clone((Part)parts.get("10890"));
             insertLogical(part);
             modify(composedproduct){
                 addProduct(part)
             }

            System.out.println("Clip 2x toegevoegd voor L20");

    end

    rule "Aantal clips is evenredig aan lengte L30"
           no-loop false
               when

                   exists(Profile(name matches ".*L30.*"));
                   exists(Clip())
                   composedproduct:ComposedProduct(dimension.width!=null);
                   c:Long(longValue<((int)composedproduct.dimension.width/500),((int)composedproduct.dimension.width/500)>=(int)2) from accumulate( i : Part( product!=null,product.class==Clip.class ) from composedproduct.products, count(i) )

               then

                Part part=SerializationUtils.clone((Part)parts.get("10891"));
                       insertLogical(part);
                       modify(composedproduct){
                           addProduct(part)
                       }
                       System.out.println("Clip toegevoegd voor L30");


               end

    rule "Aantal clips minimaal 2 L30"
    no-loop true
        when

            exists(Profile(name matches ".*L30.*"));
            exists(Clip())
            composedproduct:ComposedProduct(dimension.width!=null);
            eval((int)((composedproduct.getDimension().width)/500)<(int)2);

        then

         Part part=SerializationUtils.clone((Part)parts.get("10891"));
                insertLogical(part);
                modify(composedproduct){
                    addProduct(part)
                }
                part=SerializationUtils.clone((Part)parts.get("10891"));
                 insertLogical(part);
                 modify(composedproduct){
                     addProduct(part)
                 }
                System.out.println("Clip 2x toegevoegd voor L30");

        end


rule "Kabelgoot op maat voor L20"
no-loop true
    when
       exists(Profile(name matches ".*L20.*"));
       exists(CableChannel())
                composedproduct:ComposedProduct(dimension.width!=null);
                eval(((int)((composedproduct.getDimension().width)/1000)<=(int)4) && ((int)((composedproduct.getDimension().width)/1000)>(int)0));

    then
                Part part=SerializationUtils.clone((Part)parts.get(((int)10749+(int)(Math.ceil((double)(composedproduct.getDimension().width)/1000d)))+""));
                 insertLogical(part);
                 modify(composedproduct){
                     addProduct(part)
                 }
                System.out.println("Kabelgoot toegevoegd voor L20");

end


