/*
 * Copyright 2016 BitUnified B.V. and/or its affiliates.
 *
 */

package com.bitunified.ledconfig;
 
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;

import com.bitunified.ledconfig.domain.Dimension;
import com.bitunified.ledconfig.composedproduct.ComposedProduct;
import com.bitunified.ledconfig.domain.message.Message
import com.bitunified.ledconfig.domain.product.cover.types.ResinClear;
import com.bitunified.ledconfig.domain.product.cover.types.Resin;
import com.bitunified.ledconfig.domain.product.PCB.types.RGBLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.DecoLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.PowerLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.HighPowerLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;
import com.bitunified.ledconfig.domain.product.cable.Cable;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.CableEntry;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.LeftViaEndCapCableEntry;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.LeftViaBottomCableEntry;
import com.bitunified.ledconfig.domain.product.mounting.Mounting;
import com.bitunified.ledconfig.domain.product.mounting.NoEndCapsMounting;
import com.bitunified.ledconfig.domain.product.mounting.EndCapRightMounting;
import com.bitunified.ledconfig.domain.product.mounting.HighEndCapRightMounting;
import com.bitunified.ledconfig.domain.Property
import com.bitunified.ledconfig.domain.product.accessoires.Clip
import com.bitunified.ledconfig.domain.product.accessoires.CableChannel
import com.bitunified.ledconfig.parts.Part
import com.bitunified.ledconfig.domain.product.profile.Profile;
import com.bitunified.ledconfig.domain.message.MessageStatus;
import com.bitunified.ledconfig.domain.product.ModelResult;
import java.util.ArrayList
import java.util.List
import org.apache.commons.lang3.SerializationUtils
import com.bitunified.ledconfig.parts.Relatable
import com.bitunified.ledconfig.domain.modeltypes.RealModel
import com.bitunified.ledconfig.domain.Model
import com.bitunified.ledconfig.domain.product.mounting.EndCap
import com.bitunified.ledconfig.domain.instruction.InstructionMessage;
import java.util.Map
import java.util.HashMap
import java.util.TreeMap
import com.bitunified.ledconfig.domain.Orientation
import com.bitunified.ledconfig.helpers.PartMatchHelper
import com.bitunified.ledconfig.domain.product.cover.Covering
import com.bitunified.ledconfig.helpers.PartListHelper;
global java.util.Set<Message> messages
global java.util.Map<String,Part> parts
global java.util.Map<Integer,List<Message>> messageMap
global java.util.List<InstructionMessage> instructions;
global java.util.Map<Part,Double> partCountList;
//Rule with higher priority.


rule "Totale lengte berekening" salience 1
    when

       Mounting(mountingLeft:margins.left!=null, mountingRight:margins.right!=null)
       CableEntry(cableEntryLeft:margins.left!=null,cableEntryRight:margins.right!=null)
       LedStrip(ledstripLength:dimension.width!=null)
        cp:ComposedProduct(dimension.width==null)

    then
        int totalLength=(int)mountingLeft+(int)mountingRight+(int)ledstripLength+(int)cableEntryLeft+(int)cableEntryRight;
        cp.getDimension().width=totalLength;
        modify(cp){
        getDimension().width=totalLength
        }

        messages.add(new Message("Totale lengte automatisch berekend: "+totalLength+" mm.",8,MessageStatus.INFO));
        System.out.println("Totale lengte automatisch berekend"+totalLength);
end

rule "Totale lengte minimaal"
    when
        afm:LedStrip(afmetingen:dimension)
        exists(LedStrip(dimension.width!=null))
        exists(ComposedProduct(dimension.width!=null,((int)dimension.width)<(((int)afm.dimension.width+15))))

    then
        messages.add(new Message("Totale lengte is groter dan ledstrip lengte inclusief marges.",8,MessageStatus.ERROR));
        System.out.println("TL groter dan ledstrip lengte incl. marges");
end

rule "Totale lengte is groter dan maximale profiel lengte"
    when

        composedProduct:(ComposedProduct(dimension.width!=null))
        profile:Profile(maxDimension!=null)
        eval(composedProduct.getDimension().width>profile.getMaxDimension().width)
    then
        messages.add(new Message("Totale lengte is groter dan maximale profiel lengte.",0,MessageStatus.ERROR));
        System.out.println("TL groter dan maximale profiel lengte");
end


rule "Opgegeven lengte is kleiner dan berekende lengte"
    when

        composedProduct:(ComposedProduct(dimension.width!=null))
          Mounting(mountingLeft:margins.left!=null, mountingRight:margins.right!=null)
               CableEntry(cableEntryLeft:margins.left!=null,cableEntryRight:margins.right!=null)
               LedStrip(ledstripLength:dimension.width!=null)

               eval(composedProduct.getDimension().width<((int)mountingLeft+(int)mountingRight+(int)ledstripLength+(int)cableEntryLeft+(int)cableEntryRight))
    then
        int lengthCalc=((int)mountingLeft+(int)mountingRight+(int)ledstripLength+(int)cableEntryLeft+(int)cableEntryRight);
        messages.add(new Message("Opgegeven lengte "+composedProduct.getDimension().width+" mm is kleiner dan berekende lengte "+lengthCalc,8,MessageStatus.ERROR));
        System.out.println("Opgegeven lengte is kleiner dan berekende lengte.");
end



rule "Kap en gieting"

    when
        Resin()
        DecoLedStrip(COLOR.value=="ROOD")
    then
        messages.add(new Message("Rood met giethars niet mogelijk"));

end

rule "Minimale lengte groter dan section lengte"
    when
        LedStrip(dimension.width<SECTION.value);
    then
        messages.add(new Message("Lengte ledstrip kan niet kleiner zijn dan sectie lengte."));
end

   rule "Kabeltype demo connector mag niet in combinatie met RGB Ledstrip"
       when
           exists(RGBLedStrip());
           Cable(CABLE_TYPE matches ".*DemoConnector.*");
       then
           messages.add(new Message("Kabel met demo connector kan niet in combinatie met RGB Ledstrip.",4,MessageStatus.ERROR));
       end

   rule "Kabel uiteinde via eindkap"
       when
           exists((NoEndCapsMounting() || EndCapRightMounting() || HighEndCapRightMounting()) && LeftViaEndCapCableEntry())

       then
           messages.add(new Message("Kabel uiteinde via eindkap alleen mogelijk als kabel door eindkap gaat.",4,MessageStatus.ERROR));
       end


  rule "Actie: Profiel toevoegen"
  no-loop true
       when
            profile:Profile()
           composedproduct:ComposedProduct()
       then

            for (Object p:parts.values()){
            if (((Part)p).getProduct()!=null){
                if (((Part)p).getProduct().getName().equalsIgnoreCase(profile.getName())){
                    Part part=SerializationUtils.clone((Part)p);
                    //composedproduct.addProduct(part);
                    //System.out.println("Actie: profiel toegevoegd: "+part);
                          break;
                }
                }
            }


       end

  rule "Actie: RGB kabel toevoegen"
  no-loop true
       when
            exists(Cable(code!=null,code=="1"))
           exists(LedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"==color.value))
        then

         Part part=SerializationUtils.clone((Part)parts.get("60005"));
         PartListHelper.addToPartCountList(partCountList,part,1d);
        System.out.println("Actie RGB voor type kabel."+part);
       end



  rule "Actie: Andere kabel toevoegen type 1"
  no-loop true
       when
            exists(Cable(code!=null,code=="1"))
           exists(LedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"!=color.value));
       then
         Part part=SerializationUtils.clone((Part)parts.get("60004"));
         PartListHelper.addToPartCountList(partCountList,part,1d);
         System.out.println("Actie ander type kabel 1:"+part);
       end


  rule "Actie: RGB kabel toevoegen typ 2"
  no-loop true
       when
            exists(Cable(code!=null,code=="2"))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"==color.value));
           composedproduct:ComposedProduct()
       then
         Part part=SerializationUtils.clone((Part)parts.get("60005"));
         PartListHelper.addToPartCountList(partCountList,part,5d);
         System.out.println("Actie RGB voor type kabel 2");
       end



  rule "Actie: Andere kabel toevoegen type 2"
  no-loop true
       when
            exists(Cable("2"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"!=color.value));
       then
            Part part=SerializationUtils.clone((Part)parts.get("60004"));
             PartListHelper.addToPartCountList(partCountList,part,5d);
         System.out.println("Actie ander type 2");
       end
 rule "Actie: RGB kabel toevoegen typ 3"
  no-loop true
       when
            exists(Cable(code!=null,code=="3"))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"==color.value));

       then
         Part part=SerializationUtils.clone((Part)parts.get("60005"));
         PartListHelper.addToPartCountList(partCountList,part,5d);
         System.out.println("Actie RGB voor type 3 10x ");
       end



  rule "Actie: Andere kabel toevoegen type 3"
  no-loop true
       when
           exists(Cable("3"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"!=color.value));
       then

            Part part=SerializationUtils.clone((Part)parts.get("60004"));
           PartListHelper.addToPartCountList(partCountList,part,10d);
         System.out.println("Actie ander type 3 10x");
       end


  rule "Actie: Andere kabel toevoegen type 4 RGB"
  no-loop true
       when
            exists(Cable("4"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"==color.value));
       then
         Part part=SerializationUtils.clone((Part)parts.get("60007"));
        PartListHelper.addToPartCountList(partCountList,part,1d);
         System.out.println("Actie ander type 4 RGB");
       end
rule "Actie: Andere kabel toevoegen type 4 Niet RGB"
  no-loop true
       when
            exists(Cable("4"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"!=color.value));
       then
         Part part=SerializationUtils.clone((Part)parts.get("60006"));
         PartListHelper.addToPartCountList(partCountList,part,1d);

         System.out.println("Actie ander type 4 Niet RGB");
       end

  rule "Actie: Andere kabel toevoegen type 5 RGB"
  no-loop true
       when
            exists(Cable("5"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"==color.value))

       then

            Part part=SerializationUtils.clone((Part)parts.get("60007"));
            PartListHelper.addToPartCountList(partCountList,part,5d);
         System.out.println("Actie ander type 5 kabel RGB");
       end

rule "Actie: Andere kabel toevoegen type 5 Niet RGB"
  no-loop true
       when
            exists(Cable("5"==code))
           exists(DecoLedStrip(color:getProperty(LedStrip.COLOR_TYPE),color!=null,"rgb"!=color.value))

       then

            Part part=SerializationUtils.clone((Part)parts.get("60006"));
            PartListHelper.addToPartCountList(partCountList,part,5d);
        System.out.println("Actie ander type 5 kabel Niet RGB");
end

rule "Profiel L20 lengte"
  no-loop true
       when
            exists(Profile(name matches ".*L20.*"));
           (composedproduct:ComposedProduct(totalLength:dimension.width))
           profile:Profile(castingLength:lengthForCasting.width)
           mountingLeft:Mounting(leftMountingLength:margins.left,margins!=null,leftMountingLength!=null)
           mountingRight:Mounting(rightMountingLength:margins.right,margins!=null,margins.right!=null)
       then
         //Profiel lengte
         double length=((composedproduct.getDimension().width-((int)mountingLeft.getMargins().getLeft()))+profile.getLengthForCasting().width/4000d);
         Part part=SerializationUtils.clone((Part)parts.get("10713"));
         PartListHelper.addToPartCountList(partCountList,part,length);
         System.out.println("Profiel lengte L20:"+length);
       end
rule "Profiel L30 lengte"
  no-loop true
       when
            exists(Profile(name matches ".*L30.*"));
           (composedproduct:ComposedProduct(totalLength:dimension.width))

           profile:Profile(castingLength:lengthForCasting.width)
           mountingLeft:Mounting(leftMountingLength:margins.left,margins!=null,leftMountingLength!=null)
           mountingRight:Mounting(rightMountingLength:margins.right,margins!=null,margins.right!=null)
       then
         //Profiel lengte
         int length=-1*Math.floorDiv(-1*(composedproduct.getDimension().width-((int)mountingLeft.getMargins().getLeft()))+profile.getLengthForCasting().width,4000);

            Part part=SerializationUtils.clone((Part)parts.get("10717"));
            PartListHelper.addToPartCountList(partCountList,part,Double.valueOf(length));

         System.out.println("Profiel lengte L30:"+length);
       end


       rule "Geen eindkappen montage icm kabeleinde via linker uitgang niet mogelijk"
         no-loop true
              when
              exists(NoEndCapsMounting())
              exists(LeftViaEndCapCableEntry())
              then
               messages.add(new Message("Geen eindkappen montage icm kabeleinde via linker uitgang niet mogelijk.",6,MessageStatus.ERROR));
               end

       rule "Eindkappen; niet left side via endcap"
         no-loop true
              when
                  profile:Profile()
                  not(exists(LeftViaEndCapCableEntry()))
                  mounting:Mounting()
               then

                System.out.println("Start matching");
                Map<Orientation,PartMatchHelper.PartMostWanted> result=PartMatchHelper.match(EndCap.class,null,profile,mounting);
                Part part=null;
                if (result.get(Orientation.Left).getCount()==result.get(Orientation.Right).getCount()){
                        part=SerializationUtils.clone((Part)result.get(Orientation.Right).getPart());
                        PartListHelper.addToPartCountList(partCountList,part,1d);
                        System.out.println("Part Eindkap:"+part);
                        part=SerializationUtils.clone((Part)result.get(Orientation.Left).getPart());
                        PartListHelper.addToPartCountList(partCountList,part,1d);
                        System.out.println("Part Eindkap:"+part);
                }else{
                    if (result.get(Orientation.Left).getCount()>result.get(Orientation.Right
                    ).getCount()){
                        part=SerializationUtils.clone((Part)result.get(Orientation.Left).getPart());
                        PartListHelper.addToPartCountList(partCountList,part,1d);
                        System.out.println("Part Eindkap:"+part);
                    }
                    else{
                        part=SerializationUtils.clone((Part)result.get(Orientation.Right).getPart());
                        PartListHelper.addToPartCountList(partCountList,part,1d);
                        System.out.println("Part Eindkap:"+part);
                    }
                }

              end



rule "Actie: Ledstrip toevoegen"
    when
     ledstrip:LedStrip( sect:getProperty(LedStrip.SECTION_WIDTH),sect!=null,ledstripLengte:dimension.width)

    then
    Part part=null;
    for (Object p:parts.values()){
    if (((Part)p).getProduct()!=null && (((Part)p).getProduct()) instanceof LedStrip){
    LedStrip ls=(LedStrip) (((Part)p).getProduct());
    if (ls.getCode().equals(ledstrip.getCode())){
       double length=((Integer)ledstripLengte)/1000d;
         part=SerializationUtils.clone((Part)p);
         PartListHelper.addToPartCountList(partCountList,part,length);
          System.out.println("Ledstrip toegevoegd,lengte: "+length+": "+part);
          }
        }

    }


end


rule "Led strip section modulo"

    when

     ledstrip:LedStrip( sect:getProperty(LedStrip.SECTION_WIDTH),sect!=null,(ledstrip.dimension.width % sect.value)!=0)
    then

    messages.add(new Message("Ledstrip lengte "+ledstrip.getDimension().width+" moet een veelvoud zijn van sectielengte: "+ledstrip.getProperty(LedStrip.SECTION_WIDTH).getValue(),7,MessageStatus.ERROR));

end
rule "Actie: Aantal clips is evenredig aan lengte L20"
salience -1
       no-loop true
           when

               exists(Profile(name matches ".*L20.*")) and exists(Clip())
               composedproduct:ComposedProduct(dimension.width!=null);

           then
            int c=(int)composedproduct.getDimension().width/500;
            if (c<2){
            c=2;
            }

                Part part=SerializationUtils.clone((Part)parts.get("10890"));
                      PartListHelper.addToPartCountList(partCountList,part,Double.valueOf(c));
                        System.out.println("Clip toegevoegd voor L20 ");


end

    rule "Actie: Aantal clips is evenredig aan lengte L30"
           no-loop false
               when

                   exists(Profile(name matches ".*L30.*"));
                   exists(Clip())
                   composedproduct:ComposedProduct(dimension.width!=null);

               then
 int c=(int)composedproduct.getDimension().width/500;
            if (c<2){
            c=2;
            }

                Part part=SerializationUtils.clone((Part)parts.get("10891"));
PartListHelper.addToPartCountList(partCountList,part,Double.valueOf(c));

                       System.out.println("Clip toegevoegd voor L30");


               end



rule "Actie: Kabelgoot op maat voor L20/H20"
no-loop true
    when
       exists(Profile(name matches ".*20.*"));
       exists(CableChannel())
       composedproduct:ComposedProduct(dimension.width!=null);
       eval(((int)((composedproduct.getDimension().width)/1000)<=(int)4) && ((int)((composedproduct.getDimension().width)/1000)>(int)0));

    then
                Part part=SerializationUtils.clone((Part)parts.get(((int)10749+(int)(Math.ceil((double)(composedproduct.getDimension().width)/1000d)))+""));
              PartListHelper.addToPartCountList(partCountList,part,1d);
                System.out.println("Kabelgoot toegevoegd voor L20/H20");

end

rule "Actie: Kabelgoot op maat voor L30/H30"
no-loop true
    when
       exists(Profile(name matches ".*30.*"));
       exists(CableChannel())
       composedproduct:ComposedProduct(dimension.width!=null);
       eval(((int)((composedproduct.getDimension().width)/1000)<=(int)4) && ((int)((composedproduct.getDimension().width)/1000)>(int)0));

    then
                Part part=SerializationUtils.clone((Part)parts.get(((int)10753+(int)(Math.ceil((double)(composedproduct.getDimension().width)/1000d)))+""));
              PartListHelper.addToPartCountList(partCountList,part,1d);
                System.out.println("Kabelgoot toegevoegd voor L30/H30");

end

rule "Actie: Ingieten"
no-loop true
    when
       profile:(Profile())
       resin:(Resin())
       composedproduct:ComposedProduct(dimension.width!=null)
    then
        Map<Orientation,PartMatchHelper.PartMostWanted> result=PartMatchHelper.match(resin.getClass(),null,profile);
        Part part=null;
        if (result.get(Orientation.Left).getCount()==result.get(Orientation.Right).getCount()){
                           part=SerializationUtils.clone((Part)result.get(Orientation.Right).getPart());
                            PartListHelper.addToPartCountList(partCountList,part,1d);
                           System.out.println("Part Behuizing:"+part+ " "+result);

                   }


end


rule "Actie: Tape toevoegen voor alle ledstrip types behalve HighPower."
salience 1
no-loop true
    when

       not(exists(HighPowerLedStrip()))
       ledstrip:LedStrip()
       composedproduct:ComposedProduct(dimension.width!=null)
    then
       double length=ledstrip.getDimension().width/50000d;
  Part part=SerializationUtils.clone((Part)parts.get("60000"));
                           PartListHelper.addToPartCountList(partCountList,part,length);
    System.out.println("Tape length: "+length+" "+ledstrip.getDimension().width);
end

rule "Actie: Tube door eindkap toevoegen kabel."
no-loop true
    when
       exists(LeftViaEndCapCableEntry())
    then
        Part part=SerializationUtils.clone((Part)parts.get("GRIJP_KTULE_EINDKAP"));
        PartListHelper.addToPartCountList(partCountList,part,1d);
        System.out.println("Tube kabel door eindkap toegevoegd.");
end
rule "Actie: Tube door aluminium zwart toevoegen kabel."
no-loop true
    when
       exists(LeftViaBottomCableEntry())
    then
        Part part=SerializationUtils.clone((Part)parts.get("GRIJP_KTULE_ALU_ZWART"));
        PartListHelper.addToPartCountList(partCountList,part,1d);
        System.out.println("Tube kabel door aluminium zwart toegevoegd.");
end

rule "Actie: Tube door aluminium wit toevoegen kabel."
no-loop true
    when
       not(exists(LeftViaBottomCableEntry()) || exists(LeftViaEndCapCableEntry()))
    then
        Part part=SerializationUtils.clone((Part)parts.get("GRIJP_KTULE_ALU_WIT"));
        PartListHelper.addToPartCountList(partCountList,part,1d);
        System.out.println("Tube kabel door aluminium wit toegevoegd.");
end

rule "Actie: Arbeidsminuten toevoegen"
  no-loop true
       when
            eval(true)

       then

            Part part=SerializationUtils.clone((Part)parts.get("ARBEID"));
            PartListHelper.addToPartCountList(partCountList,part,15d);
        System.out.println("Arbeid toevoegd.");
end

rule "Actie: Handleiding toevoegen"
  no-loop true
       when
            eval(true)

       then

            Part part=SerializationUtils.clone((Part)parts.get("HANDLEIDING"));
            PartListHelper.addToPartCountList(partCountList,part,1d);
        System.out.println("Handleiding toevoegd.");
end


rule "Actie: Verpakking toevoegen"
  no-loop true
       when
            eval(true)
            composedproduct:ComposedProduct(dimension.width!=null)

       then
            double length=(composedproduct.getDimension().width/1000d)+0.25d;
            Part part=SerializationUtils.clone((Part)parts.get("VERPAKKING"));
            PartListHelper.addToPartCountList(partCountList,part,length);
        System.out.println("Verpakking toevoegd.");
end

rule "Instructie: Zaaglengte profiel"
no-loop true
salience -9
    when
        Mounting(mountingLeft:margins.left!=null, mountingRight:margins.right!=null)
        cp:ComposedProduct(dimension.width!=null)
        profile:Profile(castingLength:lengthForCasting.width!=null)

    then
        int lengthBeforeCasting=cp.getDimension().width-((Integer)mountingLeft+(Integer)mountingRight+profile.getLengthForCasting().width);
        int lengthAfterCasting=cp.getDimension().width-((Integer)mountingRight);
        int lengthEnd=cp.getDimension().width;
        instructions.add(new InstructionMessage("Zaaglengte profiel (voor gieten): "+lengthBeforeCasting+" mm"));
        instructions.add(new InstructionMessage("Zaaglengte profiel na gieten (evt. incl. linker eindkap): "+lengthAfterCasting+" mm"));
        instructions.add(new InstructionMessage("Eindlengte profiel bij levereing (evt. incl. eindkap of eindkappen): "+lengthEnd+" mm"));

        System.out.println("Intructies toegevoegd");

end

rule "Print"
salience -10
    when

        mt:Mounting()
       ce:CableEntry()
       ls:LedStrip()
        cp:ComposedProduct()

    then
        System.out.println("Totale lengte LedStrip:"+ls.getDimension().width);
        System.out.println("Totale lengte:"+cp.getDimension().width);
        System.out.println("Margins mounting:"+mt.getMargins());
        System.out.println("Margins CableEntry:"+ce.getMargins());

end