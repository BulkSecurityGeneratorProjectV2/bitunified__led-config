/*
 * Copyright 2016 BitUnified B.V. and/or its affiliates.
 *
 */

package com.bitunified.ledconfig;
 
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;

import com.bitunified.ledconfig.domain.Dimension;
import com.bitunified.ledconfig.composedproduct.ComposedProduct;
import com.bitunified.ledconfig.domain.message.Message
import com.bitunified.ledconfig.domain.product.cover.types.ResinClear;
import com.bitunified.ledconfig.domain.product.cover.types.Resin;
import com.bitunified.ledconfig.domain.product.PCB.types.RGBLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.DecoLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.PowerLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;
import com.bitunified.ledconfig.domain.product.cable.Cable;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.CableEntry;
import com.bitunified.ledconfig.domain.product.cable.cableconfig.LeftViaEndCapCableEntry;
import com.bitunified.ledconfig.domain.product.mounting.Mounting;
import com.bitunified.ledconfig.domain.product.mounting.NoEndCapsMounting;
import com.bitunified.ledconfig.domain.Property
import com.bitunified.ledconfig.domain.product.accessoires.Clip
import com.bitunified.ledconfig.domain.product.accessoires.CableChannel
import com.bitunified.ledconfig.parts.Part
import com.bitunified.ledconfig.domain.product.profile.Profile;
import com.bitunified.ledconfig.domain.message.MessageStatus;
import com.bitunified.ledconfig.domain.product.ModelResult;
import java.util.ArrayList
import java.util.List
import org.apache.commons.lang3.SerializationUtils
import com.bitunified.ledconfig.parts.Relatable
import com.bitunified.ledconfig.domain.modeltypes.RealModel
import com.bitunified.ledconfig.domain.Model
import com.bitunified.ledconfig.domain.product.mounting.EndCap
import java.util.Map
import java.util.HashMap
import java.util.TreeMap
import com.bitunified.ledconfig.domain.Orientation
import com.bitunified.ledconfig.helpers.EndCapMatchHelper;
global java.util.List<Message> messages
global java.util.Map<Part> parts
global java.util.Map<Integer,List<Message>> messageMap
//Rule with higher priority.
rule "Totale lengte berekening" salience 1
    when

       Mounting(mountingLeft:margins.left!=null, mountingRight:margins.right!=null)
       CableEntry(cableEntryLeft:margins.left!=null,cableEntryRight:margins.right!=null)
       LedStrip(ledstripLength:dimension.width!=null)
        cp:ComposedProduct(dimension.width==null)

    then
        int totalLength=(int)mountingLeft+(int)mountingRight+(int)ledstripLength+(int)cableEntryLeft+(int)cableEntryRight;
        cp.getDimension().width=totalLength;
        //List<Message> msgs=((List<Message>)messageMap.get(8));

        ((((List<Message>)(messageMap.get(8))))).add(new Message("Totale lengte automatisch berekend: "+totalLength+" mm."));
        System.out.println("Totale lengte automatisch berekend"+totalLength);
end

rule "Totale lengte minimaal"
    when
        afm:LedStrip(afmetingen:dimension)
        exists(LedStrip(dimension.width!=null))
        exists(ComposedProduct(dimension.width!=null,((int)dimension.width)<(((int)afm.dimension.width+15))))

    then
        messages.add(new Message("Totale lengte is groter dan ledstrip lengte inclusief marges.",8,MessageStatus.ERROR));
        System.out.println("TL groter dan ledstrip lengte incl. marges");
end

rule "Totale lengte is groter dan maximale ledstrip lengte"
    when
        ledstrip:LedStrip(maxDim:maxDimension,maxDimension.width!=null)
        exists(ComposedProduct(dimension.width!=null,dimension.width<ledstrip.dimension.width))

    then
        messages.add(new Message("Totale lengte is groter dan maximale ledstrip lengte.",3,MessageStatus.ERROR));
        System.out.println("TL groter dan maximale ledstrip lengte");
end

rule "Kap en gieting"

    when
        Resin()
        DecoLedStrip(COLOR_PROP.value=="ROOD")
    then
        messages.add(new Message("Rood met giethars niet mogelijk"));

end

rule "Minimale lengte groter dan section lengte"
    when
        LedStrip(dimension.width<SECTION.value);
    then
        messages.add(new Message("Lengte ledstrip kan niet kleiner zijn dan sectie lengte."));
end

//rule "Kabeltype moet overeenkomen met PCB type"
//    when
//        exists(DecoLedStrip());
//        not(Cable(TYPE matches ".*2-aderig.*"));
//    then
//        messages.add(new Message("Let op: kabeltype past niet bij PCB."));
//    end

   rule "Kabeltype demo connector mag niet in combinatie met RGB Ledstrip"
       when
           exists(RGBLedStrip());
           Cable(CABLE_TYPE matches ".*DemoConnector.*");
       then
           messages.add(new Message("Kabel met demo connector kan niet in combinatie met RGB Ledstrip.",4,MessageStatus.ERROR));
       end




  rule "Actie: RGB kabel toevoegen"
  no-loop true
       when
            exists(Cable(code!=null,code=="1"))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value)) or exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value));
           composedproduct:ComposedProduct()
       then

         Part part=SerializationUtils.clone((Part)parts.get("60005"));

         composedproduct.addProduct(part);
        System.out.println("Actie RGB voor type 1:");
       end



  rule "Actie: Andere kabel toevoegen type 1"
  no-loop true
       when
            exists(Cable(code!=null,code=="1"))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value)) and exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value));
           (composedproduct:ComposedProduct())
       then
         Part part=SerializationUtils.clone((Part)parts.get("60004"));
        composedproduct.addProduct(part);
                        System.out.println("Actie ander type 1:");
       end


  rule "Actie: RGB kabel toevoegen typ 2"
  no-loop true
       when
            exists(Cable(code!=null,code=="2"))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value)) or exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value));
           composedproduct:ComposedProduct()
       then
for (int i=0;i<5;i++){
         Part part=SerializationUtils.clone((Part)parts.get("60005"));
         composedproduct.addProduct(part);
          }
        System.out.println("Actie RGB voor type 2");
       end



  rule "Actie: Andere kabel toevoegen type 2"
  no-loop true
       when
            exists(Cable("2"==code))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value)) and exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value));
           (composedproduct:ComposedProduct())
       then
       for (int i=0;i<5;i++){
         Part part=SerializationUtils.clone((Part)parts.get("60004"));
        composedproduct.addProduct(part);
         }
         System.out.println("Actie ander type 2");
       end
 rule "Actie: RGB kabel toevoegen typ 3"
  no-loop true
       when
            exists(Cable(code!=null,code=="3"))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value)) or exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value));
           composedproduct:ComposedProduct()
       then
        for (int i=0;i<10;i++){
         Part part=SerializationUtils.clone((Part)parts.get("60005"));
         composedproduct.addProduct(part);

          }
        System.out.println("Actie RGB voor type 3 10x ");
       end



  rule "Actie: Andere kabel toevoegen type 3"
  no-loop true
       when
            exists(Cable("3"==code))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value)) and exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value));
           (composedproduct:ComposedProduct())
       then
        for (int i=0;i<10;i++){
            Part part=SerializationUtils.clone((Part)parts.get("60004"));
            composedproduct.addProduct(part);

       }
         System.out.println("Actie ander type 3 10x");
       end


  rule "Actie: Andere kabel toevoegen type 4 RGB"
  no-loop true
       when
            exists(Cable("4"==code))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value)) and exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"==color.value));
           (composedproduct:ComposedProduct())
       then
         Part part=SerializationUtils.clone((Part)parts.get("60007"));
        composedproduct.addProduct(part);

         System.out.println("Actie ander type 4 RGB");
       end
rule "Actie: Andere kabel toevoegen type 4 Niet RGB"
  no-loop true
       when
            exists(Cable("4"==code))
           exists(DecoLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value)) and exists(PowerLedStrip(color:getProperty(DecoLedStrip.COLOR),color!=null,"rgb"!=color.value));
           (composedproduct:ComposedProduct())
       then
         Part part=SerializationUtils.clone((Part)parts.get("60006"));
        composedproduct.addProduct(part);

         System.out.println("Actie ander type 4 Niet RGB");
       end

rule "Profiel L20 lengte"
  no-loop true
       when

            exists(Profile(name matches ".*L20.*"));
           (composedproduct:ComposedProduct(totalLength:dimension.width))

           profile:Profile(castingLength:lengthForCasting.width)
           mountingLeft:Mounting(leftMountingLength:margins.left,margins!=null,leftMountingLength!=null)
           mountingRight:Mounting(rightMountingLength:margins.right,margins!=null,margins.right!=null)
       then
         //Profiel lengte
         int length=-1*Math.floorDiv(-1*(composedproduct.getDimension().width-((int)mountingLeft.getMargins().getLeft()))+profile.getLengthForCasting().width,4000);
         for (int i=0;i<length;i++){
         Part part=SerializationUtils.clone((Part)parts.get("10713"));
        composedproduct.addProduct(part);
        }

         System.out.println("Profiel lengte L20:"+length);
       end
rule "Profiel L30 lengte"
  no-loop true
       when

            exists(Profile(name matches ".*L30.*"));
           (composedproduct:ComposedProduct(totalLength:dimension.width))

           profile:Profile(castingLength:lengthForCasting.width)
           mountingLeft:Mounting(leftMountingLength:margins.left,margins!=null,leftMountingLength!=null)
           mountingRight:Mounting(rightMountingLength:margins.right,margins!=null,margins.right!=null)
       then
         //Profiel lengte
         int length=-1*Math.floorDiv(-1*(composedproduct.getDimension().width-((int)mountingLeft.getMargins().getLeft()))+profile.getLengthForCasting().width,4000);
         for (int i=0;i<length;i++){
         Part part=SerializationUtils.clone((Part)parts.get("10717"));
        composedproduct.addProduct(part);
        }

         System.out.println("Profiel lengte L30:"+length);
       end


       rule "Geen eindkappen montage icm kabeleinde via linker uitgang niet mogelijk"
         no-loop true
              when
              exists(NoEndCapsMounting())
              exists(LeftViaEndCapCableEntry())
              then
               messages.add(new Message("Geen eindkappen montage icm kabeleinde via linker uitgang niet mogelijk.",6,MessageStatus.ERROR));
               end

       rule "Eindkappen"
         no-loop true
              when


                  profile:Profile(relations:relation.relateTo,relation!=null)
                  cableEntry:CableEntry()
                  mounting:Mounting()
                  composedproduct:ComposedProduct()
               then


                Map<Orientation,EndCapMatchHelper.EndCapMostWanted> result=EndCapMatchHelper.match(profile,mounting,cableEntry);
                Part part=null;
                if (result.get(Orientation.Left).getCount()==result.get(Orientation.Right).getCount()){
                        part=SerializationUtils.clone((Part)result.get(Orientation.Right).getEndCap());
                        composedproduct.addProduct(part);
                        part=SerializationUtils.clone((Part)result.get(Orientation.Left).getEndCap());
                        composedproduct.addProduct(part);
                }else{
                    if (result.get(Orientation.Left).getCount()>result.get(Orientation.Right
                    ).getCount()){
                        part=SerializationUtils.clone((Part)result.get(Orientation.Left).getEndCap());
                        composedproduct.addProduct(part);
                    }
                    else{
                        part=SerializationUtils.clone((Part)result.get(Orientation.Right).getEndCap());
                        composedproduct.addProduct(part);
                    }
                }

              end
//
//  case '1':                                                                               // Option 1 selected
//
//                newConfig.UNIT4.partlist.push({
//                    Part: 10713,
//                    Count: ((newConfig.totalLength - (newConfig.steps[4].left + newConfig.steps[4].right)) + newConfig.steps[0].addLengthForCasting) / 4000
//                });// Add the profile to the list
//
//                Subs = [10900, 10901, 10902, 10903, 10908, 95000, 95001];                           // Load article numbers of end caps and castings
//
//                break;
//
//            case '2':                                                                               // Option 2 selected
//
//                newConfig.UNIT4.partlist.push({
//                    Part: 10717,
//                    Count: ((newConfig.totalLength - (newConfig.steps[4].left + newConfig.steps[4].right)) + newConfig.steps[0].addLengthForCasting) / 4000
//                });// Add the profile to the list
//
//                Subs = [10904, 10905, 10906, 10907, 10908, 95010, 95011];                           // Load article numbers of end caps and castings
//
//                break;
//
//            case '4':                                                                               // Option 4 selected
//
//                newConfig.UNIT4.partlist.push({
//                    Part: 10733,
//                    Count: ((newConfig.totalLength - (newConfig.steps[4].left + newConfig.steps[4].right)) + newConfig.steps[0].addLengthForCasting) / 4000
//                });// Add the profile to the list
//
//                Subs = [10920, 10921, 10922, 10923, 10928, 95003, 95004];                           // Load article numbers of end caps and castings
//
//                break;
//
//            case '5':                                                                               // Option 5 selected
//
//                newConfig.UNIT4.partlist.push({
//                    Part: 10737,
//                    Count: ((newConfig.totalLength - (newConfig.steps[4].left + newConfig.steps[4].right)) + newConfig.steps[0].addLengthForCasting) / 4000
//                });// Add the profile to the list
//
//                Subs = [10924, 10925, 10926, 10927, 10928, 95013, 95014];                           // Load article numbers of end caps and castings
//
//                break;


rule "Led strip section modulo"

    when

     ledstrip:LedStrip( sect:getProperty(LedStrip.SECTION_WIDTH),sect!=null,(sect.value % ledstrip.dimension.width)!=0)
    then

    messages.add(new Message("Ledstrip lengte moet een veelvoud zijn van sectielengte: "+ledstrip.getProperty(LedStrip.SECTION_WIDTH).getValue(),7,MessageStatus.ERROR));

end
rule "Aantal clips is evenredig aan lengte L20"
       no-loop false
           when

               exists(Profile(name matches ".*L20.*"));
               exists(Clip())
               composedproduct:ComposedProduct(dimension.width!=null);
               c:Long(longValue<((int)composedproduct.dimension.width/500),((int)composedproduct.dimension.width/500)>=(int)2) from accumulate( i : Part( product!=null,product.class==Clip.class ) from composedproduct.products, count(i) )

           then

            Part part=SerializationUtils.clone((Part)parts.get("10890"));

            modify(composedproduct){
                addProduct(part)
            }
            System.out.println("Clip toegevoegd voor L20");
           end
//
rule "Aantal clips minimaal 2 L20"
no-loop true
    when

        exists(Profile(name matches ".*L20.*")) and exists(Clip())
        composedproduct:ComposedProduct(dimension.width!=null);
        eval((int)((composedproduct.getDimension().width)/(int)500)<(int)2);

    then

     Part part=SerializationUtils.clone((Part)parts.get("10890"));

            composedproduct.addProduct(part);

            part=SerializationUtils.clone((Part)parts.get("10890"));
            composedproduct.addProduct(part);


            System.out.println("Clip 2x toegevoegd voor L20");

    end

    rule "Aantal clips is evenredig aan lengte L30"
           no-loop false
               when

                   exists(Profile(name matches ".*L30.*"));
                   exists(Clip())
                   composedproduct:ComposedProduct(dimension.width!=null);
                   c:Long(longValue<((int)composedproduct.dimension.width/500),((int)composedproduct.dimension.width/500)>=(int)2) from accumulate( i : Part( product!=null,product.class==Clip.class ) from composedproduct.products, count(i) )

               then

                Part part=SerializationUtils.clone((Part)parts.get("10891"));

                       composedproduct.addProduct(part);

                       System.out.println("Clip toegevoegd voor L30");


               end

    rule "Aantal clips minimaal 2 L30"
    no-loop true
        when

            exists(Profile(name matches ".*L30.*"));
            exists(Clip())
            composedproduct:ComposedProduct(dimension.width!=null);
            eval((int)((composedproduct.getDimension().width)/500)<(int)2);

        then

         Part part=SerializationUtils.clone((Part)parts.get("10891"));

                composedproduct.addProduct(part);

                part=SerializationUtils.clone((Part)parts.get("10891"));

                 composedproduct.addProduct(part);

                System.out.println("Clip 2x toegevoegd voor L30");

        end


rule "Kabelgoot op maat voor L20"
no-loop true
    when
       exists(Profile(name matches ".*L20.*"));
       exists(CableChannel())
                composedproduct:ComposedProduct(dimension.width!=null);
                eval(((int)((composedproduct.getDimension().width)/1000)<=(int)4) && ((int)((composedproduct.getDimension().width)/1000)>(int)0));

    then
                Part part=SerializationUtils.clone((Part)parts.get(((int)10749+(int)(Math.ceil((double)(composedproduct.getDimension().width)/1000d)))+""));
                 composedproduct.addProduct(part);
                System.out.println("Kabelgoot toegevoegd voor L20");

end


