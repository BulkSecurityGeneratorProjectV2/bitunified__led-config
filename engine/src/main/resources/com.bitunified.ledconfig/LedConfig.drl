/*
 * Copyright 2016 BitUnified B.V. and/or its affiliates.
 *
 */

package com.bitunified.ledconfig;
 
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;

import com.bitunified.ledconfig.domain.Dimension;
import com.bitunified.ledconfig.composedproduct.ComposedProduct;
import com.bitunified.ledconfig.domain.message.Message
import com.bitunified.ledconfig.domain.product.cover.types.ResinClear;
import com.bitunified.ledconfig.domain.product.cover.types.Resin;
import com.bitunified.ledconfig.domain.product.PCB.types.RGBLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.types.DecoLedStrip;
import com.bitunified.ledconfig.domain.product.PCB.LedStrip;
import com.bitunified.ledconfig.domain.product.cable.Cable;
import com.bitunified.ledconfig.domain.Property
import com.bitunified.ledconfig.domain.product.accessoires.Clip
import com.bitunified.ledconfig.parts.Part
import com.bitunified.ledconfig.domain.message.MessageStatus;
import java.util.ArrayList;
global java.util.List<Message> messages




rule "Totale lengte minimaal"
    when
        LedStrip(afmetingen:dimension)
        LedStrip(dimension.width!=null)
        ComposedProduct(dimension.width!=null)
        ComposedProduct(dimension.width<(afmetingen.width+15))

    then
        messages.add(new Message("Totale lengte is groter dan ledstrip lengte inclusief marges.",8,MessageStatus.ERROR));

end

rule "Totale lengte is groter dan maximale ledstrip lengte"
    when
        LedStrip(maxDim:maxDimension)
        LedStrip(maxDimension.width!=null)
        ComposedProduct(productDimension:dimension,productDimension.width!=null)
        ComposedProduct(productDimension.width<maxDim.width)

    then
        messages.add(new Message("Totale lengte is groter dan maximale ledstrip lengte.",4,MessageStatus.ERROR));

end

rule "Kap en gieting"

    when
        Resin()
        DecoLedStrip(COLOR_PROP.value=="ROOD")
    then
        messages.add(new Message("Rood met giethars niet mogelijk" ));

end

rule "Minimale lengte groter dan section lengte"
    when
        LedStrip(dimension.width<SECTION.value);
    then
        messages.add(new Message("Lengte ledstrip kan niet kleiner zijn dan sectie lengte."));
end

rule "Kabeltype moet overeenkomen met PCB type"
    when
        exists(DecoLedStrip());
        Cable(TYPE.value!="2-aderig");
    then
        messages.add(new Message("Let op: kabeltype past niet bij PCB."));
    end
rule "Led strip section modulo"

    when
     ledstrip:LedStrip( sect:getProperty(LedStrip.SECTION_WIDTH),(sect.value % ledstrip.dimension.width)!=0)
    then

    messages.add(new Message("Ledstrip lengte moet een veelvoud zijn van sectielengte: "+ledstrip.getProperty(LedStrip.SECTION_WIDTH).getValue(),7,MessageStatus.ERROR));

end
rule "Aantal clips is evenredig aan lengte"
no-loop false
    when
        composedproduct:ComposedProduct();
    ComposedProduct(dimension.width!=null);
    //ArrayList( size > 1 ) from collect (ComposedProduct(prods:products))

       count : Number(intValue<=composedproduct.dimension.width/100)
          from accumulate( i : Part( product.class==Clip.class ) from composedproduct.getProducts(), count( i ) )

    then
        Part part=new Part(new Clip());
        insert(part);
        modify(composedproduct){
            addProduct(part)
        }
        System.out.println((int)(composedproduct.getDimension().width/100));
        System.out.println("Clip toegevoegd");
    end